{
    // https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "local-gdb", // 用 gdb 调试本地程序。可以顺畅使用。若安装了 lldb， 会用 lldb。 在调试控制台 help 验证。
            // "type": "cppdbg", // cpptools plugin
            "type": "lldb", // clangd + codelldb plugins
            "request": "launch",
            "program": "${workspaceFolder}/build/linux-x64/ImageCompare",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            // "cwd": "${workspaceFolder}/build/linux-x64", // 若读取文件使用了相对路径，为保持一致性，可修改为此行
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "linux-x64-build",  // 依赖于 tasks.json 中名为 cmake build 的步骤， 用于避免修改代码后忘记编译导致调试失败。
        },
        {
            // 调试远程 android arm64 程序.  https://github.com/vadimcn/vscode-lldb/blob/master/MANUAL.md#remote-debugging
            // NOTE: 若断点无法停留， 请检查是否开启了调试符号编译选项 -g . 可参考 04_global_configuration/debug_symbol_example
            "name": "remote-lldb-arm64",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/build/android-arm64/testbed",
            "initCommands": [
                "platform select remote-android",
                "platform connect connect://4af156d2:10086",
                "settings set target.inherit-env false", // 设备上跑的testbed，不要继承 host 的环境变量
            ],
            "preLaunchTask": "android-arm64-build",  // 依赖于 tasks.json 中名为 cmake build 的步骤， 用于避免修改代码后忘记编译导致调试失败。
        },
        {
            "name": "remote-lldb-arm32", // 调试远程 android arm32 程序
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/build/android-arm64/testbed",
            "initCommands": [
                "platform select remote-android",
                "platform connect connect://4af156d2:10086",
                "settings set target.inherit-env false", // 设备上跑的testbed，不要继承 host 的环境变量
            ],
            "preLaunchTask": "android-arm32-build",  // 依赖于 tasks.json 中名为 android-arm32-build 的步骤， 用于避免修改代码后忘记编译导致调试失败。
        },
        {
            "name": "local-lldb",
            // "type": "cppdbg", // cpptools plugin
            "type": "lldb", // clangd + codelldb plugins
            "request": "launch",
            "program": "${workspaceFolder}/build/linux-x64/testbed",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "lldb",
            "setupCommands": [
                {
                    "description": "为 lldb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "cmake build",
            "miDebuggerPath": "/home/zz/soft/lldb-mi/bin/lldb-mi",
            //"miDebuggerPath": "/usr/bin/lldb-mi",
        },

        {
            "name": "debug-single-file", // 用于(本地)调试单个可执行文件。适合(Linux/MacOSX)快速验证， 或无源码情况下的调试
            // "type": "cppdbg", // cpptools plugin
            "type": "lldb", // clangd + codelldb plugins
            "request": "launch",
            "program": "${workspaceFolder}/a.out", // 指定可执行文件路径
            "args": [],
            "stopAtEntry": false,
            "stopAtConnect": true,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preRunCommands": [ // 指定在 lldb 执行 run 之前的 lldb 命令， 例如在 main 设置断点
                "b main"
            ],
            "preLaunchTask": "compile single C++", // 若只有 a.out 而无源码， 则可以注释掉此步骤
        },
        {
            "name": "cl.exe build and debug active file", // 编译并调试单个文件（当前打开）
            "type": "cppvsdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "preLaunchTask": "cl.exe build active file"
        },
        {
            "name": "vs2022-x64", // 编译并调试基于 CMake 的一整个工程
            "type": "cppvsdbg",  // cppdbg 无效
            "request": "launch",
            "program": "${workspaceRoot}/build/vs2022-x64/Debug/testbed.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            //"cwd": "${workspaceFolder}/build/vs2022-x64",
            "environment": [],
            "externalConsole": false,
            "miDebuggerPath": "/usr/bin/gdb",
            "preLaunchTask": "vs2022-x64 build with cmake"
        },
    ]
}